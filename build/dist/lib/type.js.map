{"version":3,"file":"type.js","sourceRoot":"","sources":["../../../src/type.ts"],"names":[],"mappings":"","sourcesContent":["export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\r\n\r\nexport type KeysOfType<T, ExpectedKeyType> = {[P in keyof T]: T[P] extends ExpectedKeyType ? P : never}[keyof T];\r\n\r\nexport type PickOptional<T> = Pick<T, {[K in keyof T]-?: {} extends {[P in K]: T[K]} ? K : never}[keyof T]>;\r\n"]}