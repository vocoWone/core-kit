{"version":3,"file":"RegexKit.js","sourceRoot":"","sources":["../../../../src/common/RegexKit.tsx"],"names":[],"mappings":"AAAA;;;EAGE;AAEF;IAAA;IAQA,CAAC;IAPU,6BAAoB,GAA3B,UAA4B,OAAe,EAAE,GAAW,EAAE,0BAA0C;QAA1C,2CAAA,EAAA,iCAA0C;QAChG,IAAM,WAAW,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,MAAI,GAAG,YAAS,EAAE,OAAI,0BAA0B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC;QAC7G,IAAI,WAAW,EAAE;YACb,OAAO,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,MAAI,GAAK,CAAC,EAAE,EAAE,CAAC,EAApC,CAAoC,CAAC,CAAC;SACrE;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,eAAC;AAAD,CAAC,AARD,IAQC","sourcesContent":["/* Attention:\n    1. \"M123M321\".match(/(?<=M)\\d+/g) or \"M123M321\".match(new RegExp('(?<=M)\\\\d+', 'g')) are supported in Google Chrome, other browsers are not supported(eg: Safari). Ref: https://github.com/atom/find-and-replace/issues/814\n    2. Using `new RegExp`\n*/\n\nexport class RegexKit {\n    static matchDigitalAfterKey(content: string, key: string, ifDistinguishCaseSensitive: boolean = true): string[] | null {\n        const matchResult = content.match(new RegExp(`(${key}>?)\\\\d+`, `g${ifDistinguishCaseSensitive ? \"\" : \"i\"}`));\n        if (matchResult) {\n            return matchResult.map(_ => _.replace(new RegExp(`^${key}`), \"\"));\n        }\n        return null;\n    }\n}\n"]}