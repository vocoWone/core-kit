{"version":3,"file":"object.js","sourceRoot":"","sources":["../../../../src/base/object.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,WAAW,CAAiE,OAAiB;IACzG,IAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,GAAa,CAAC,EAA1B,CAA0B,CAAC,CAAC;IAClE,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,QAAQ;AACR,MAAM,UAAU,aAAa,CAAsB,MAAS,EAAE,cAA8E,IAAG,CAAC;AAEhJ,MAAM,UAAU,eAAe,CAAsB,MAAS,EAAE,cAA8E;IAC1I,IAAM,SAAS,GAAG,EAAE,CAAC;IACrB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;QACnC,IAAM,WAAW,GAAG,cAAc,CAAC,GAAuB,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;QAChF,SAAS,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,OAAO,SAA+B,CAAC;AAC3C,CAAC;AAED,MAAM,UAAU,aAAa,CAAsB,MAAS,EAAE,cAA8E;IACxI,IAAM,MAAM,GAAQ,EAAE,CAAC;IACvB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAuB,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,EAAxE,CAAwE,CAAC,CAAC;IACtH,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,MAAc;IAClC,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;AAC5C,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,SAAS,CAAI,MAAS;IAClC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;AAC9C,CAAC","sourcesContent":["export function enumToArray<EnumType extends {[P in keyof EnumType]: EnumType[P] & string}>(enumMap: EnumType): string[] {\n    const result: string[] = [];\n    Object.values(enumMap).forEach(key => result.push(key as string));\n    return result;\n}\n\n// TODO:\nexport function eachObjectKey<T extends object, V>(object: T, mapperCallback: (key: keyof T & string, value: T[keyof T], index: number) => V) {}\n\nexport function eachObjectValue<T extends object, V>(object: T, mapperCallback: (key: keyof T & string, value: T[keyof T], index: number) => V): Record<keyof T, V> {\n    const newObject = {};\n    Object.keys(object).forEach((key, index) => {\n        const mappedValue = mapperCallback(key as keyof T & string, object[key], index);\n        newObject[key] = mappedValue;\n    });\n\n    return newObject as Record<keyof T, V>;\n}\n\nexport function objectToArray<T extends object, V>(object: T, mapperCallback: (key: keyof T & string, value: T[keyof T], index: number) => V): V[] {\n    const result: V[] = [];\n    Object.keys(object).forEach((key, index) => result.push(mapperCallback(key as keyof T & string, object[key], index)));\n    return result;\n}\n\nexport function isEmpty(object: object): boolean {\n    return Object.keys(object).length === 0;\n}\n\n/**\n * Not applicable to object with function fields\n */\nexport function deepClone<T>(object: T): T {\n    return JSON.parse(JSON.stringify(object));\n}\n"]}