{"version":3,"file":"type.js","sourceRoot":"","sources":["../../../src/type.ts"],"names":[],"mappings":"","sourcesContent":["export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport type FunctionType<P, T> = (...arg: P extends Array<infer K> ? K[] : never) => T;\n\nexport type KeysOfType<T, ExpectedKeyType> = {[P in keyof T]: T[P] extends ExpectedKeyType ? P : never}[keyof T];\n\nexport type PickOptional<T> = Pick<T, {[K in keyof T]-?: {} extends {[P in K]: T[K]} ? K : never}[keyof T]>;\n\nexport interface Dictionary<T> {\n    [index: string]: T;\n}\n\nexport interface NumericDictionary<T> {\n    [index: number]: T;\n}\n"]}