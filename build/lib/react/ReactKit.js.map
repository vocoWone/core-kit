{"version":3,"file":"ReactKit.js","sourceRoot":"","sources":["../../../../src/react/ReactKit.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B;IAAA;IA8BA,CAAC;IA7BU,kBAAS,GAAhB,UAAiB,KAAwB,EAAE,SAA0B,EAAE,SAAyB;QAAzB,0BAAA,EAAA,gBAAyB;QAC5F,2EAA2E;QAC3E,IAAM,WAAW,GAAsB,KAAK,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,KAAK,IAAK,OAAA,CAC3D,oBAAC,KAAK,CAAC,QAAQ,IAAC,GAAG,EAAE,KAAK;YACrB,CAAC;YACD,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CACzB,CACpB,EAL8D,CAK9D,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,EAAE;YACZ,WAAW,CAAC,OAAO,CAAC,oBAAC,KAAK,CAAC,QAAQ,IAAC,GAAG,EAAC,WAAW,IAAE,SAAS,CAAkB,CAAC,CAAC;YAClF,WAAW,CAAC,IAAI,CAAC,oBAAC,KAAK,CAAC,QAAQ,IAAC,GAAG,EAAC,UAAU,IAAE,SAAS,CAAkB,CAAC,CAAC;SACjF;QACD,OAAO,WAAW,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACI,wBAAe,GAAtB,UAAuB,IAAY;QAAE,oBAAgC;aAAhC,UAAgC,EAAhC,qBAAgC,EAAhC,IAAgC;YAAhC,mCAAgC;;QACjE,IAAM,KAAK,GAAsB,EAAE,CAAC;QACpC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,KAAK;YACpC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACd,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACjB,CAAC;IACL,eAAC;AAAD,CAAC,AA9BD,IA8BC","sourcesContent":["import React from \"react\";\n\nexport class ReactKit {\n    static joinNodes(nodes: React.ReactNode[], separator: React.ReactNode, innerJoin: boolean = true): React.ReactNode {\n        // Do not use nodes.reduce, because it fails to handle key(prop) perfectly.\n        const joinedNodes: React.ReactNode[] = nodes.map((_, index) => (\n            <React.Fragment key={index}>\n                {_}\n                {index < nodes.length - 1 && separator}\n            </React.Fragment>\n        ));\n        if (!innerJoin) {\n            joinedNodes.unshift(<React.Fragment key=\"__first__\">{separator}</React.Fragment>);\n            joinedNodes.push(<React.Fragment key=\"__last__\">{separator}</React.Fragment>);\n        }\n        return joinedNodes;\n    }\n\n    /**\n     * For React Native UI, parameters must be Text-based node\n     * Currently, only support placeholders {1} {2} in sequence\n     *\n     * E.g: interpolateTextNode(\"Dice {1} Prize {2}\", <Dice value={6}/>, <Amount value={3.5}/>)\n     */\n    static interpolateNode(text: string, ...parameters: React.ReactNode[]): React.ReactNode {\n        const nodes: React.ReactNode[] = [];\n        text.split(/\\{\\d+\\}/g).forEach((_, index) => {\n            nodes.push(_);\n            nodes.push(parameters[index]);\n        });\n        return nodes;\n    }\n}\n"]}